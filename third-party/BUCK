
platformFlags = [
    ('windows.*',['-D_WIN32','-DBOOST_EXECUTION_CONTEXT=1','-DBOOST_USE_FCONTEXT']),
    ('linux.*',['-DHAVE_PTHREAD','-ldl']),
    ('macosx.*',['-DHAVE_PTHREAD']),
    ('freebsd.*',['-DHAVE_PTHREAD']),
    ('android.*',['-DHAVE_PTHREAD']),
    ('iphone.*',['-DHAVE_PTHREAD','-DBOOST_NO_CXX11_THREAD_LOCAL']),
]

boostDir = 'boost_1_66_0'

######################## BOOST-COMMON ########################

boostCommonDir = boostDir + "/boost"

cxx_library(
    name = 'boost-common',
    exported_headers = subdir_glob([
        ( boostCommonDir, '*.h'),
        ( boostCommonDir, '*.hpp'),
        ( boostCommonDir, 'predef/**/*.h'),
        ( boostCommonDir, 'core/**/*.hpp'),
        ( boostCommonDir, 'detail/**/*.hpp'),
        ( boostCommonDir, 'config/**/*.hpp'),
        ( boostCommonDir, 'pool/**/*.hpp'),
        ( boostCommonDir, 'integer/**/*.hpp'),
        ( boostCommonDir, 'type_traits/**/*.hpp'),
        ( boostCommonDir, 'smart_ptr/**/*.hpp'),
    ]),
    platform_preprocessor_flags = platformFlags,
    visibility = ['PUBLIC',],
    header_namespace = 'boost'
)

######################## BOOST-ASIO ########################

boostAsioIncludeDir = boostDir + '/boost/asio'

boostAsioWindowsHeaders = subdir_glob([
    ( boostAsioIncludeDir, 'windows/**/*.hpp'),
    ( boostAsioIncludeDir, 'windows/**/*.ipp'),
])

boostAsioPosixHeaders = subdir_glob([
    ( boostAsioIncludeDir, 'posix/**/*.hpp'),
    ( boostAsioIncludeDir, 'posix/**/*.ipp'),
])

cxx_library(
    name = 'boost-asio',
    exported_headers = subdir_glob([
        ( boostAsioIncludeDir, 'detail/**/*.hpp'),
        ( boostAsioIncludeDir, 'detail/**/*.ipp'),
        ( boostAsioIncludeDir, 'generic/**/*.hpp'),
        ( boostAsioIncludeDir, 'generic/**/*.ipp'),
        ( boostAsioIncludeDir, 'impl/**/*.hpp'),
        ( boostAsioIncludeDir, 'impl/**/*.ipp'),
        ( boostAsioIncludeDir, 'ip/**/*.hpp'),
        ( boostAsioIncludeDir, 'ip/**/*.ipp'),
        ( boostAsioIncludeDir, 'local/**/*.hpp'),
        ( boostAsioIncludeDir, 'local/**/*.ipp'),
        ( boostAsioIncludeDir, 'ssl/**/*.hpp'),
        ( boostAsioIncludeDir, 'ssl/**/*.ipp'),
        ( boostAsioIncludeDir, 'ts/**/*.hpp'),
        ( boostAsioIncludeDir, '*.hpp'),
    ]),
    exported_platform_headers = [
        ('^macosx.*', boostAsioPosixHeaders ),
        ('^linux.*', boostAsioPosixHeaders ),
        ('^android.*', boostAsioPosixHeaders ),
        ('^iphone.*', boostAsioPosixHeaders ),
        ('^windows.*', boostAsioWindowsHeaders ),
    ],
    platform_preprocessor_flags = platformFlags,
    visibility = ['PUBLIC',],
    header_namespace = 'boost/asio',
    deps = [
        ':boost-common',
    ]
)



######################## BOOST-CONTEXT ########################

boostContextSrcDir = boostDir + '/libs/context/src'
boostContextIncludeDir = boostDir + '/boost/context'

bostContextPosixHeaders = subdir_glob([
    ( boostContextIncludeDir, 'posix/*.hpp'),
])

bostContextPosixSrcs = glob([
    boostContextSrcDir + '/posix/*.cpp',
    # boostContextSrcDir + '/continuation.cpp',
    boostContextSrcDir + '/execution_context.cpp',
])

bostContextIosSrcs = glob([
    boostContextSrcDir + '/posix/*.cpp',
])

bostContextWindowsHeaders = subdir_glob([
    ( boostContextIncludeDir, 'windows/*.hpp'),
])

bostContextWindowsSrcs = glob([
    boostContextSrcDir + '/windows/*.cpp',
])

cxx_library(
    name = 'boost-context',
    exported_headers = subdir_glob([
        ( boostContextIncludeDir, 'detail/*.hpp'),
        ( boostContextIncludeDir, '*.hpp'),
        ( boostContextIncludeDir, '*.ipp'),
    ]),
    exported_platform_headers = [
        ('^macosx.*', bostContextPosixHeaders ),
        ('^linux.*', bostContextPosixHeaders ),
        ('^android.*', bostContextPosixHeaders ),
        ('^iphone.*', bostContextPosixHeaders ),
        ('^windows.*', bostContextWindowsHeaders ),
    ],
    platform_srcs = [
        ('^macosx-x86_64', [
            boostContextSrcDir + '/asm/jump_x86_64_sysv_macho_gas.S',
            boostContextSrcDir + '/asm/make_x86_64_sysv_macho_gas.S',
            boostContextSrcDir + '/asm/ontop_x86_64_sysv_macho_gas.S',
        ]),
        ('^macosx.*', bostContextPosixSrcs ),
        ('^linux-x86_64', [
            boostContextSrcDir + '/asm/jump_x86_64_sysv_elf_gas.S',
            boostContextSrcDir + '/asm/make_x86_64_sysv_elf_gas.S',
            boostContextSrcDir + '/asm/ontop_x86_64_sysv_elf_gas.S',
        ]),
        ('^linux.*', bostContextPosixSrcs ),
        ('^android-x86', [
            boostContextSrcDir + '/asm/jump_i386_sysv_elf_gas.S',
            boostContextSrcDir + '/asm/make_i386_sysv_elf_gas.S',
            boostContextSrcDir + '/asm/ontop_i386_sysv_elf_gas.S',
        ]),
        ('^android-armv7', [
            boostContextSrcDir + '/asm/jump_arm_aapcs_elf_gas.S',
            boostContextSrcDir + '/asm/make_arm_aapcs_elf_gas.S',
            boostContextSrcDir + '/asm/ontop_arm_aapcs_elf_gas.S',
        ]),
        ('^android.*', bostContextPosixSrcs ),
        ('^iphoneos-arm64', [
            boostContextSrcDir + '/asm/jump_arm64_aapcs_macho_gas.S',
            boostContextSrcDir + '/asm/make_arm64_aapcs_macho_gas.S',
            boostContextSrcDir + '/asm/ontop_arm64_aapcs_macho_gas.S',
        ]),
        ('^iphoneos-armv7', [
            boostContextSrcDir + '/asm/jump_arm_aapcs_macho_gas.S',
            boostContextSrcDir + '/asm/make_arm_aapcs_macho_gas.S',
            boostContextSrcDir + '/asm/ontop_arm_aapcs_macho_gas.S',
        ]),
        ('^iphonesimulator-x86_64', [
            boostContextSrcDir + '/asm/jump_x86_64_sysv_macho_gas.S',
            boostContextSrcDir + '/asm/make_x86_64_sysv_macho_gas.S',
            boostContextSrcDir + '/asm/ontop_x86_64_sysv_macho_gas.S',
        ]),
        ('^iphonesimulator-i386', [
            boostContextSrcDir + '/asm/jump_i386_sysv_macho_gas.S',
            boostContextSrcDir + '/asm/make_i386_sysv_macho_gas.S',
            boostContextSrcDir + '/asm/ontop_i386_sysv_macho_gas.S',
        ]),
        ('^iphone.*', bostContextIosSrcs ),
        ('^windows-x86_64', [
            boostContextSrcDir + '/asm/jump_x86_64_ms_pe_gas.asm',
            boostContextSrcDir + '/asm/make_x86_64_ms_pe_gas.asm',
            boostContextSrcDir + '/asm/ontop_x86_64_ms_pe_gas.asm',
        ]),
        ('^windows.*', bostContextWindowsSrcs ),
    ],
    preprocessor_flags = [
        '-DBOOST_EXECUTION_CONTEXT=2',
        '-DBOOST_USE_FCONTEXT'
    ],
    platform_preprocessor_flags = platformFlags,
    visibility = ['PUBLIC',],
    header_namespace = 'boost/context',
    deps = [
        ':boost-common',
    ]
)

######################## LTALLOC ########################

cxx_library(
    name = 'ltalloc',
    exported_headers = subdir_glob([
        ('ltalloc', 'ltalloc.h')
    ]),
    srcs = [
        'ltalloc/ltalloc.cc'
    ],
    preprocessor_flags = [
        '-DLTALLOC_DISABLE_OPERATOR_NEW_OVERRIDE'
    ],
    header_namespace = 'ltalloc',
    visibility = ['PUBLIC',],
)
